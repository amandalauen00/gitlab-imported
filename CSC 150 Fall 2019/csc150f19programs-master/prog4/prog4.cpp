/** ***************************************************************************
* @file
*
* @mainpage Program 3 - Converting Units
*
* @section course_section Course Information
*
* @author Amanda Lauen
*
* @date December 8th, 2019
*
* @par Professor
*      Kelly Corwin
*
* @par Course
*      CSC150 - M003 - 3:00pm
*
* @par Location
*      Classroom Building - Room 328
*
* @section program_section Program Information
* This program is the game of "Slides and Ladders." The program begins with the
* program opening the files necessary to run the program. It will check if the
* correct arguments are present and if the file opened successfully.
*
* The program will then determine which game mode it is in. If it is in
* time mode, the program will start with the opening message “Let’s play
* "Slides and Ladders."  The program will then ask for the human player’s name
* that will be carried out throughout the game.  Then the board will print, and
* the dice will be rolled for each player, one being the human, who always goes
* first, and the other being the “COMPUTER.”  The roll value will be generated
* by a random function and will move the player up, down, or stay where they
* are at depending on their roll value plus the current number on the game
* board. This will continue on until both the players reach the end of the
* board and then it will determine who has won or if it is a tie.
*
* If it is in user mode, the program will start with the opening message “Let’s
* play Slides and Ladders.”  The program will then ask for the human player’s
* name that will be carried out throughout the game.  Then the program will
* ask the user to enter a seed value to be put into the random function. After
* that is entered, the board will print and the dice will be rolled for each
* player, one being the human, who always goes first, and the other being the
* “COMPUTER.” The roll value will be generated by the random seed function and
* will move the player up, down, or stay where they are at depending on their
* roll value plus the current number on the game board.  This will continue on
* until both the players reach the end of the board and then it will determine
* who has won or if it is a tie.
*
* If it is in debug mode, the program will start with the opening message
* “Let’s play Slides and Ladders.”  The program will then ask for the human
* player’s name that will be carried out throughout the game.  The board will
* print, and the dice will be rolled for each player, one being the human,
* who always goes first, and the other being the “COMPUTER.”  The roll value
* will be user generated by the asking the user to enter a value between 1 and
* 6 for both the human player and the “COMPUTER”. If a value is entered isn’t
* within the range, then the appropriate error massage will be printed and will
* ask the user again for a value between 1 and 6.  The roll value will be what
* they entered  and will move the player up, down, or stay where they are at
* depending on their roll value plus the current number on the game board. This
* will continue on until both the players reach the end of the board and then
* it will determine who has won or if it is a tie.
*
* The program will return 0 if it has run successfully.
*
* @section compiling_section Compiling and Usage
*
* @par Compling Instructions: 
* None
*
* @verbatim
  c:\> prog4.exe <SL1.txt><-d><-t><-u>
                 <SL2.txt><-d><-t><-u>
                 <SLHardMode.txt><-d><-t><-u>
  d:\> c:\bin\prog4.exe
  @endverbatim
*
* @section todo_bugs_modifications_section Todo, Bugs, and Modifications
*
* @bug Can't get function headers to show up on Doxygen, just like other code
* @bug The board updates when printed out after someone moves
*
* @todo None
*
* <a href = "https://gitlab.mcs.sdsmt.edu/7452203/csc150f19programs
* /commits/master" target="_blank">The gitlab commit log</a>"
*
***************************************************************************/

//This helps with not getting VS warnings with Cstring functions
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <fstream>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <ctime>
#include <cstdlib>

using namespace std;

//Function Prototypes
void readBoard(ifstream& inFile, int game_board[], int max_size);
void printBoard(int game_board[], int num_col, int num_rows, int location_human, int location_comp);
int rollDie();
int movePlayer(int location_human, char player_name[], int roll_value, int max_value, int game_board[]);
int moveComputer(int location_comp, int roll_value, int max_value, int game_board[]);

/** ***************************************************************************
* @author Amanda Lauen
*
* @par Description:
*      This function declares the variables used in the program and opens the
*      input file that is used for the game board array.  The program will
*      first check if the command line has the correct number of arguments.
*      If not, the appropriate error message will output and end the program.
*      If so, the program will attempt to open the file and will check if it
*      opened or not.  If not, it will output the appropriate error message and
*      end the program.  If all pass, then the function will take the argument
*      of value 2 and copy it into the variable seed letter to determine which
*      game mode it is in.  
*
*      If it is in time mode, then the program will check 
*      if the location of the human and computer are less than or equal to the
*      max size of the board array. It will then update and get the roll value,
*      location of the human, and the location of the computer and determine
*      who is the winner or if ends in a tie.
*
*      If it is in user seed mode, then then the program will ask the user to
*      enter in a seed value that will be initialized in the srand function.
*      Then the program will check if the location of the human and computer
*      are less than or equal to the max size of the board array. It will then
*      update and get the roll value, location of the human, and the location
*      of the computer and determine who is the winner or if ends in a tie.  
*
*      If it is in debug mode, then the program will ask the user to enter a
*      value between one and six inclusivly, if not inclusivly, an error will
*      pop up and ask the user again.  It will do this for both the computer
*      and the human player and the value entered will be the roll value.
*      This function will also update the location of the human and the 
*      computer to determine who is the winner or if it ends in a tie.
*
*      If it is not any of these seed values, then the appropriate
*      error message will print out and end the program.
*
*      This function returns 0 if it runs successfully.
*
*
* @param[in]   argc - a count of the command line arguments used to start
*                       the program.
* @param[in]   argv - a 1D character array of each argument.  Each token
*                       occupies one line in the array.
*
* @returns 0 program ran successful.
***************************************************************************/
int main(int argc, char* argv[])
{
   //Initialize all variables
    ifstream inFile;
    int game_board[100];
    int num_col = 0;
    int num_rows = 0;
    int location_human = 0;
    int location_comp = 0;
    int counter = 0;
    int max_size = 0;
    char player_name[100];
    char comp_name[100] = "COMPUTER";
    char seed_letter[100] = "-F";
    int roll_value = 0;
    int seed_value = 0;
    bool curr_player_human = true;

    //Check if the command line arguments are within the limit
    if (argc != 3)
    {
        cout << "Usage: prog4.exe <filename> <option>" << endl <<
            "<option> can be - t or -u or -d" << endl;
        return 0;
    }

    //Open the file
    inFile.open(argv[1]);

    //Check to see if the file is open
    if (!inFile.is_open())
    {
        cout << "Input file opening error. Program exiting." << endl;
        return 0;
    }

    //Copy command line argument variable into the variable seed_letter
    strcpy(seed_letter, argv[2]);

    //Checks if the seed letter is in time mode case insensitive
    if (strcmp(seed_letter, "-t") == 0 || strcmp(seed_letter, "-T") == 0)
    {
        cout << "Let's play Slides and Ladders!" << endl << endl;
        //Get human's name
        cout << "Human player, enter your name: ";
        cin.getline(player_name, 100);
        cout << endl;
        //Brings in the number of rows and columns from file
        inFile >> num_rows;
        inFile >> num_col;
        //Determine the size of the board
        max_size = num_rows * num_col;
        readBoard(inFile, game_board, max_size);
        printBoard(game_board, num_col, num_rows, location_human, location_comp);
        //Initialize random seed
        srand(int(time(0)));

        //Check if the location of the human and computer are less
        //than or equal to the max size of the board array
        while (location_human <= max_size && location_comp <= max_size)
        {
            //Determine the roll value of the human player
            roll_value = rollDie();
            //Print what they rolled
            cout << "Player " << player_name << " rolled a " << roll_value << endl;
            //Determine their new location on the board
            location_human = movePlayer(location_human, player_name, roll_value, max_size, game_board);
           //Print the updated board
            printBoard(game_board, num_col, num_rows, location_human, location_comp);

            //Determine the roll value of the computer
            roll_value = rollDie();
            //Print what they rolled
            cout << "Player COMPUTER rolled a " << roll_value << endl;
            //Determine their new location on the board
            location_comp = moveComputer(location_comp, roll_value, max_size, game_board);
            //Print the updated board
            printBoard(game_board, num_col, num_rows, location_human, location_comp);

            //At the end of the game, determine who won or if it was a tie
            cout << "Press ENTER to continue..." << endl;
            cin.get();
            cin.ignore();
            if (location_human >= max_size && location_comp >= max_size)
            {
                
                cout << "Game is over. It is a TIE!" << endl;
                break;
            }

            if (location_human >= max_size)
            {
                
                cout << "Game is over. Player " << player_name << " won!" << endl;
                break;
            }
            if (location_comp >= max_size)
            {
                
                cout << "Game is over. Player COMPUTER won!" << endl;
                break;
            }

        }
    }
    //Determine if the game is in debug mode case insensitive
    else if (strcmp(seed_letter, "-d") == 0 || strcmp(seed_letter, "-D") == 0)
    {
        cout << "Let's play Slides and Ladders!" << endl << endl;
        //Get human's name
        cout << "Human player, enter your name: ";
        cin.getline(player_name, 100);
        cout << endl;
        //Brings in the number of rows and columns from file
        inFile >> num_rows;
        inFile >> num_col;
        //Determine the size of the board
        max_size = num_rows * num_col;
        readBoard(inFile, game_board, max_size);
        printBoard(game_board, num_col, num_rows, location_human, location_comp);

        //Check if the location of the human and computer are less
        //than or equal to the max size of the board array
        while (location_human <= max_size || location_comp <= max_size)
        {
            //Ask the user for their roll value
            cout << "[debug] Enter a number (1-6): ";
            cin >> roll_value;
            //Determine if it is within range
            while (roll_value > 6 || roll_value < 1)
            {
                cout << "Try again, must be in range (1-6)" << endl;
                cout << "[debug] Enter a number (1-6): ";
                cin >> roll_value;
            }
            //Print out the player's roll value
            cout << "Player " << player_name << " rolled a " << roll_value << endl;
            //Determine their new location on the board
            location_human = movePlayer(location_human, player_name, roll_value, max_size, game_board);
            //Print the updated board
            printBoard(game_board, num_col, num_rows, location_human, location_comp);

            //Ask the computer for their roll value
            cout << "[debug] Enter a number (1-6): ";
            cin >> roll_value;
            //Determine if it is withing range
            while (roll_value > 6 || roll_value < 1)
            {
                cout << "Try again, must be in range (1-6)" << endl;
                cout << "[debug] Enter a number (1-6): ";
                cin >> roll_value;
            }
           //Print out the computer's roll value
            cout << "Player COMPUTER rolled a " << roll_value << endl;
            //Determine their new location on the board
            location_comp = moveComputer(location_comp, roll_value, max_size, game_board);
            //Print the updated board
            printBoard(game_board, num_col, num_rows, location_human, location_comp);

            //Once the game is done, press to see who won or if it ended in
            //a tie
            cout << "Press ENTER to continue..." << endl;
            cin.get();
            cin.ignore();
            if (location_human >= max_size && location_comp >= max_size)
            {
                
                cout << "Game is over. It is a TIE!" << endl;
                break;
            }

            if (location_human >= max_size)
            {
                
                cout << "Game is over. Player " << player_name << " won!" << endl;
                break;
            }
            if (location_comp >= max_size)
            {
                
                cout << "Game is over. Player COMPUTER won!" << endl;
                break;
            }
        }
    }
    //Determine if the game is in user mode case insensitive
    else if (strcmp(seed_letter, "-u") == 0 || strcmp(seed_letter, "-U") == 0)
    {
        cout << "Let's play Slides and Ladders!" << endl << endl;
        //Get the user's name
        cout << "Human player, enter your name: ";
        cin.getline(player_name, 100);
        cout << endl;
        //Brings in the number of rows and columns from file
        inFile >> num_rows;
        inFile >> num_col;
        //Determine the size of the board
        max_size = num_rows * num_col;
        readBoard(inFile, game_board, max_size);
        //Ask the user for their seed value
        cout << "Enter seed value: ";
        cin >> seed_value;
        //Initialize random to the seed value entered
        srand(int(seed_value));
        printBoard(game_board, num_col, num_rows, location_human, location_comp);

        //Check if the location of the human and computer are less
        //than or equal to the max size of the board array
        while (location_human <= max_size && location_comp <= max_size)
        {
            //Determine the roll value of the human player
            roll_value = rollDie();
            //Print what they rolled
            cout << "Player " << player_name << " rolled a " << roll_value << endl;
            //Determine their new location on the board
            location_human = movePlayer(location_human, player_name, roll_value, max_size, game_board);
            //Print the updated board
            printBoard(game_board, num_col, num_rows, location_human, location_comp);

            //Determine the roll value of the computer
            roll_value = rollDie();
            //Print what they rolled
            cout << "Player COMPUTER rolled a " << roll_value << endl;
            //Determine their new location on the board
            location_comp = moveComputer(location_comp, roll_value, max_size, game_board);
            //Print the updated board
            printBoard(game_board, num_col, num_rows, location_human, location_comp);

            //At the end of the game, determine who won or if it was a tie
            cout << "Press ENTER to continue..." << endl;
            cin.get();
            cin.ignore();
            if (location_human >= max_size && location_comp >= max_size)
            {
                
                cout << "Game is over. It is a TIE!" << endl;
                break;
            }

            if (location_human >= max_size)
            {
                cout << "Game is over. Player " << player_name << " won!" << endl;
                break;
            }
            if (location_comp >= max_size)
            {
                
                cout << "Game is over. Player COMPUTER won!" << endl;
                break;
            }

        }
    }
    //Determines if there is no acceptable seed value entered
    else
    {
        cout << "Usage: prog4.exe <filename> <option>" << endl <<
                 "<option> can be - t or -u or -d" << endl;
    }
    inFile.close();
    return 0;
}
/** ***************************************************************************
* @author Amanda Lauen
*
* @par Description:
*      This function reads the board portion of the input file.
*      This function will run and store values into the game_board
*      array until the end of the array is reached or when the end of
*      the file is reached.  This function returns nothing.
* @param[in]    inFile          - This variable holds the input file object that can be
*                                 changed throughout the code, hence pass by reference
* @param[in]    game_board[]    - This variable hold all the characters that go into
                                  the game board
* @param[in]    max_size        - This variable holds maximum size of the array that it
*                                 can reach
*
* @returns none
*
***************************************************************************/
void readBoard(ifstream& inFile, int game_board[], int max_size)
{
    //Initialize incrementer
    int i = 0;
    //Continue adding into the game_board array until it's end or file end
    while (i < max_size && inFile >> game_board[i])
    {
        i++;
    }
}
/** ***************************************************************************
* @author Amanda Lauen
*
* @par Description:
*      This function prints the board onto the screen to show where the human
*      and computer are located on the board, also where the slides and ladders
*      are.  This function returns nothing.
* @param[in]    game_board[]    - This variable hold all the characters that go into
                                  the game board
* @param[in]    num_col         - This variable holds the total number of columns
* @param[in]    num_rows        - This variable holds the total number of rows
* @param[in]    location_human  - This variable tells what the current location of the human
                                  player is
* @param[in]    location_comp   - This variable tells what the current location of the computer
                                  player is
*
* @returns none
*
***************************************************************************/
void printBoard(int game_board[], int num_col, int num_rows, int location_human, int location_comp)
{
    //Initialize counter
    int counter = 0;

    //Make sure the game board is in row-major order
    for (int i = 0; i < num_rows; i++)
    {
        for (int j = 0; j < num_col; j++)
        {
            cout << "+---";
        }
        cout << "+";
        cout << endl;
        //For each column, determine if it has a variable in it
        for (int j = 0; j < num_col; j++)
        {
            cout << "|";
            //Determines where the human's spot is on the board
            if (location_human == counter)
            {
                cout << 'P';
            }
            else
            {
                cout << ' ';
            }
            //Determines where the slides and ladders are on the board   
            if (game_board[counter] < 0)
            {
                cout << 'S';
            }
            else if (game_board[counter] > 0)
            {
                cout << 'L';
            }
            else
            {
                cout << ' ';
            }
            //Determines where the computer's spot is on the board
            if (location_comp == counter)
            {
                cout << 'C';
            }
            else
            {
                cout << ' ';
            }
            //Increment counter up to help move the player on the board
            counter++;
        }
        cout << "|";
        cout << endl;
    }
    //Makes sure there is a closing row of pluses and minuses
    for (int j = 0; j < num_col; j++)
    {
        cout << "+---";
    }
    cout << "+";
    cout << endl;
}
/** ***************************************************************************
* @author Amanda Lauen
*
* @par Description:
*      This function is to be used only with the time and user game modes.
*      This function doesn't take in any parameters but it returns out the
*      roll value that will be used in almost every other function.  This
*      function initialized roll value to zero, and then calculated the random
*      value that will be used to help both the human player and the computer 
*      player move throughout the game board.
*
* @returns roll_value
*
***************************************************************************/
int rollDie()
{
    //Initialize roll_value
    int roll_value = 0;
    //Determine the random roll_value for time seed and user seed
    roll_value = rand() % 6 + 1;

    //Return roll value back to int main
    return roll_value;
}
/** ***************************************************************************
* @author Amanda Lauen
*
* @par Description:
*      This function takes in the location of the human, the game board array,
*      the max value of the game board, and the player's name.  This function
*      determines if the human player either moves up, down, or stays at the same
*      place on the board.  When it has determined whether the human moves, it will
*      return the location of the human back to int main.
*
* @param[in]    location_human  - This variable tells what the current
*                                 location of the human player is
* @param[in]    player_name[]   - This holds the player's name
* @param[in]    roll_value     - This holds the roll value from the
*                                human player
* @param[in]    game_board[]    - This variable hold all the characters that
*                                 go into the game board
* @param[in]    seed_letter[]  - This holds the seed value determined
*                                  by the command line
*
* @returns location_human
*
***************************************************************************/
int movePlayer(int location_human, char player_name[], int roll_value, int max_value, int game_board[])
{
    //Initialize roll sum
    int roll_sum = 0;

    //Determine the roll sum for the human
    roll_sum = location_human + roll_value;

    //Determine if the roll sum is greater than max value
    if (roll_sum >= max_value)
    {
        //Return the sum of the location human nd roll value
        return location_human + roll_value;
    }

    //Check if the roll sum is equal to zero
    if (game_board[roll_sum] == 0)
    {
        //Make location sum equal to the roll sum
        location_human = roll_sum;
        //Print out the new location
        cout << "Player " << player_name << " moved to square " << location_human << endl;
        //Return that location back to int main
        return location_human;
    }
    //Check if the game board value of the rolled sum is greater than 0
    else if (game_board[roll_sum] > 0)
    {
        //Set location human equal to the sum of the roll sum and 
        //game board value at the roll sum
        location_human = roll_sum + game_board[roll_sum];
        //Print out new location
        cout << "GREAT! Player " << player_name << " reached a ladder, moving up to " << location_human << endl;
        //Return location human back to int main
        return location_human;
    }
    //Check if the game board value at roll_sum is less than 0
    else if (game_board[roll_sum] < 0)
    {
        //Set location human equal to roll_sum plus
        //the value of the game_board at the roll_sum
        location_human = roll_sum + game_board[roll_sum];
        //Print out new location
        cout << "OH NO! Player " << player_name << " is sliding back to square " << location_human << endl;
        //Return location human back to int main
        return location_human;
    }
    return 0;



}
/** ***************************************************************************
* @author Amanda Lauen
*
* @par Description:
*      This function takes in the location of the computer, the game board array,
*      and the max value of the game board.  This function
*      determines if the computer player either moves up, down, or stays at the same
*      place on the board.  When it has determined whether the computer moves, it will
*      return the location of the computer back to int main.
*
* @param[in]    location_comp   - This variable tells what the current location of the computer
*                                 player is
* @param[in]    roll_value    - This variable holds the roll value
* @param[in]    max_value    - This variable hold all the characters that go into
*                                 the game board
* @param[in]    game_board[]    - This variable hold all the characters that go into
*                                 the game board

*
* @returns location_comp
*
***************************************************************************/
int moveComputer(int location_comp, int roll_value, int max_value, int game_board[])
{
    //Initialize roll_sum to 0
    int roll_sum = 0;

    //Determine the roll sum for the computer
    roll_sum = location_comp + roll_value;

    //Determine if the roll sum is greater than or equal to the 
    //max value
    if (roll_sum >= max_value)
    {
        return location_comp + roll_value;
    }
    //Determine if the value at the game_board at roll_sum equals 0
    if (game_board[roll_sum] == 0)
    {
        //Set location comp equal to roll sum
        location_comp = roll_sum;
        //Print out new location
        cout << "Player COMPUTER moved to square " << location_comp << endl;
        //Returm location comp back to int main
        return  location_comp;
    }
    //Determine if the game_board at roll_sum is greater than 0
    else if (game_board[roll_sum] > 0)
    {
        //Set location comp equal to the sum of the roll sum plus 
        //the game board at roll sum
        location_comp = roll_sum + game_board[roll_sum];
        //Print out new location
        cout << "GREAT! Player COMPUTER reached a ladder, moving up to " << location_comp << endl;
        //Return location comp
        return  location_comp;
    }
    //Determine if the game board at roll sum is less than 0
    else if (game_board[roll_sum] < 0)
    {
        //Set location comp equal to the roll sum plus the 
        //game board at roll sum
        location_comp = roll_sum + game_board[roll_sum];
        //Print out new location
        cout << "OH NO! Player COMPUTER is sliding back to square " << location_comp << endl;
        //Return location comp back to int main
        return  location_comp;
    }
    return 0;

}


